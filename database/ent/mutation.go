// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
	"github.com/xyenon/telemikiya/database/ent/dialog"
	"github.com/xyenon/telemikiya/database/ent/message"
	"github.com/xyenon/telemikiya/database/ent/predicate"
	"github.com/xyenon/telemikiya/types"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDialog  = "Dialog"
	TypeMessage = "Message"
)

// DialogMutation represents an operation that mutates the Dialog nodes in the graph.
type DialogMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	title           *string
	_type           *types.DialogType
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	messages        map[uuid.UUID]struct{}
	removedmessages map[uuid.UUID]struct{}
	clearedmessages bool
	done            bool
	oldValue        func(context.Context) (*Dialog, error)
	predicates      []predicate.Dialog
}

var _ ent.Mutation = (*DialogMutation)(nil)

// dialogOption allows management of the mutation configuration using functional options.
type dialogOption func(*DialogMutation)

// newDialogMutation creates new mutation for the Dialog entity.
func newDialogMutation(c config, op Op, opts ...dialogOption) *DialogMutation {
	m := &DialogMutation{
		config:        c,
		op:            op,
		typ:           TypeDialog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDialogID sets the ID field of the mutation.
func withDialogID(id int64) dialogOption {
	return func(m *DialogMutation) {
		var (
			err   error
			once  sync.Once
			value *Dialog
		)
		m.oldValue = func(ctx context.Context) (*Dialog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dialog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDialog sets the old Dialog of the mutation.
func withDialog(node *Dialog) dialogOption {
	return func(m *DialogMutation) {
		m.oldValue = func(context.Context) (*Dialog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DialogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DialogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dialog entities.
func (m *DialogMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DialogMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DialogMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dialog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *DialogMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *DialogMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Dialog entity.
// If the Dialog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DialogMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *DialogMutation) ResetTitle() {
	m.title = nil
}

// SetType sets the "type" field.
func (m *DialogMutation) SetType(tt types.DialogType) {
	m._type = &tt
}

// GetType returns the value of the "type" field in the mutation.
func (m *DialogMutation) GetType() (r types.DialogType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Dialog entity.
// If the Dialog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DialogMutation) OldType(ctx context.Context) (v types.DialogType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DialogMutation) ResetType() {
	m._type = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DialogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DialogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Dialog entity.
// If the Dialog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DialogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DialogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddMessageIDs adds the "messages" edge to the Message entity by ids.
func (m *DialogMutation) AddMessageIDs(ids ...uuid.UUID) {
	if m.messages == nil {
		m.messages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Message entity.
func (m *DialogMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the Message entity was cleared.
func (m *DialogMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Message entity by IDs.
func (m *DialogMutation) RemoveMessageIDs(ids ...uuid.UUID) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Message entity.
func (m *DialogMutation) RemovedMessagesIDs() (ids []uuid.UUID) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *DialogMutation) MessagesIDs() (ids []uuid.UUID) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *DialogMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// Where appends a list predicates to the DialogMutation builder.
func (m *DialogMutation) Where(ps ...predicate.Dialog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DialogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DialogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dialog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DialogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DialogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dialog).
func (m *DialogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DialogMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, dialog.FieldTitle)
	}
	if m._type != nil {
		fields = append(fields, dialog.FieldType)
	}
	if m.updated_at != nil {
		fields = append(fields, dialog.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DialogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dialog.FieldTitle:
		return m.Title()
	case dialog.FieldType:
		return m.GetType()
	case dialog.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DialogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dialog.FieldTitle:
		return m.OldTitle(ctx)
	case dialog.FieldType:
		return m.OldType(ctx)
	case dialog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Dialog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DialogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dialog.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case dialog.FieldType:
		v, ok := value.(types.DialogType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case dialog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Dialog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DialogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DialogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DialogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dialog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DialogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DialogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DialogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dialog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DialogMutation) ResetField(name string) error {
	switch name {
	case dialog.FieldTitle:
		m.ResetTitle()
		return nil
	case dialog.FieldType:
		m.ResetType()
		return nil
	case dialog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Dialog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DialogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.messages != nil {
		edges = append(edges, dialog.EdgeMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DialogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dialog.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DialogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmessages != nil {
		edges = append(edges, dialog.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DialogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dialog.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DialogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessages {
		edges = append(edges, dialog.EdgeMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DialogMutation) EdgeCleared(name string) bool {
	switch name {
	case dialog.EdgeMessages:
		return m.clearedmessages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DialogMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dialog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DialogMutation) ResetEdge(name string) error {
	switch name {
	case dialog.EdgeMessages:
		m.ResetMessages()
		return nil
	}
	return fmt.Errorf("unknown Dialog edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	msg_id         *int
	addmsg_id      *int
	text           *string
	text_embedding *pgvector.Vector
	has_media      *bool
	media_info     **types.MediaInfo
	sent_at        *time.Time
	clearedFields  map[string]struct{}
	dialog         *int64
	cleareddialog  bool
	done           bool
	oldValue       func(context.Context) (*Message, error)
	predicates     []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id uuid.UUID) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgID sets the "msg_id" field.
func (m *MessageMutation) SetMsgID(i int) {
	m.msg_id = &i
	m.addmsg_id = nil
}

// MsgID returns the value of the "msg_id" field in the mutation.
func (m *MessageMutation) MsgID() (r int, exists bool) {
	v := m.msg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgID returns the old "msg_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgID: %w", err)
	}
	return oldValue.MsgID, nil
}

// AddMsgID adds i to the "msg_id" field.
func (m *MessageMutation) AddMsgID(i int) {
	if m.addmsg_id != nil {
		*m.addmsg_id += i
	} else {
		m.addmsg_id = &i
	}
}

// AddedMsgID returns the value that was added to the "msg_id" field in this mutation.
func (m *MessageMutation) AddedMsgID() (r int, exists bool) {
	v := m.addmsg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgID resets all changes to the "msg_id" field.
func (m *MessageMutation) ResetMsgID() {
	m.msg_id = nil
	m.addmsg_id = nil
}

// SetDialogID sets the "dialog_id" field.
func (m *MessageMutation) SetDialogID(i int64) {
	m.dialog = &i
}

// DialogID returns the value of the "dialog_id" field in the mutation.
func (m *MessageMutation) DialogID() (r int64, exists bool) {
	v := m.dialog
	if v == nil {
		return
	}
	return *v, true
}

// OldDialogID returns the old "dialog_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldDialogID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDialogID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDialogID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDialogID: %w", err)
	}
	return oldValue.DialogID, nil
}

// ResetDialogID resets all changes to the "dialog_id" field.
func (m *MessageMutation) ResetDialogID() {
	m.dialog = nil
}

// SetText sets the "text" field.
func (m *MessageMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *MessageMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *MessageMutation) ResetText() {
	m.text = nil
}

// SetTextEmbedding sets the "text_embedding" field.
func (m *MessageMutation) SetTextEmbedding(pg pgvector.Vector) {
	m.text_embedding = &pg
}

// TextEmbedding returns the value of the "text_embedding" field in the mutation.
func (m *MessageMutation) TextEmbedding() (r pgvector.Vector, exists bool) {
	v := m.text_embedding
	if v == nil {
		return
	}
	return *v, true
}

// OldTextEmbedding returns the old "text_embedding" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldTextEmbedding(ctx context.Context) (v pgvector.Vector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextEmbedding is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextEmbedding requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextEmbedding: %w", err)
	}
	return oldValue.TextEmbedding, nil
}

// ClearTextEmbedding clears the value of the "text_embedding" field.
func (m *MessageMutation) ClearTextEmbedding() {
	m.text_embedding = nil
	m.clearedFields[message.FieldTextEmbedding] = struct{}{}
}

// TextEmbeddingCleared returns if the "text_embedding" field was cleared in this mutation.
func (m *MessageMutation) TextEmbeddingCleared() bool {
	_, ok := m.clearedFields[message.FieldTextEmbedding]
	return ok
}

// ResetTextEmbedding resets all changes to the "text_embedding" field.
func (m *MessageMutation) ResetTextEmbedding() {
	m.text_embedding = nil
	delete(m.clearedFields, message.FieldTextEmbedding)
}

// SetHasMedia sets the "has_media" field.
func (m *MessageMutation) SetHasMedia(b bool) {
	m.has_media = &b
}

// HasMedia returns the value of the "has_media" field in the mutation.
func (m *MessageMutation) HasMedia() (r bool, exists bool) {
	v := m.has_media
	if v == nil {
		return
	}
	return *v, true
}

// OldHasMedia returns the old "has_media" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldHasMedia(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasMedia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasMedia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasMedia: %w", err)
	}
	return oldValue.HasMedia, nil
}

// ResetHasMedia resets all changes to the "has_media" field.
func (m *MessageMutation) ResetHasMedia() {
	m.has_media = nil
}

// SetMediaInfo sets the "media_info" field.
func (m *MessageMutation) SetMediaInfo(ti *types.MediaInfo) {
	m.media_info = &ti
}

// MediaInfo returns the value of the "media_info" field in the mutation.
func (m *MessageMutation) MediaInfo() (r *types.MediaInfo, exists bool) {
	v := m.media_info
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaInfo returns the old "media_info" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMediaInfo(ctx context.Context) (v *types.MediaInfo, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaInfo: %w", err)
	}
	return oldValue.MediaInfo, nil
}

// ResetMediaInfo resets all changes to the "media_info" field.
func (m *MessageMutation) ResetMediaInfo() {
	m.media_info = nil
}

// SetSentAt sets the "sent_at" field.
func (m *MessageMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *MessageMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *MessageMutation) ResetSentAt() {
	m.sent_at = nil
}

// ClearDialog clears the "dialog" edge to the Dialog entity.
func (m *MessageMutation) ClearDialog() {
	m.cleareddialog = true
	m.clearedFields[message.FieldDialogID] = struct{}{}
}

// DialogCleared reports if the "dialog" edge to the Dialog entity was cleared.
func (m *MessageMutation) DialogCleared() bool {
	return m.cleareddialog
}

// DialogIDs returns the "dialog" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DialogID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) DialogIDs() (ids []int64) {
	if id := m.dialog; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDialog resets all changes to the "dialog" edge.
func (m *MessageMutation) ResetDialog() {
	m.dialog = nil
	m.cleareddialog = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Message, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.msg_id != nil {
		fields = append(fields, message.FieldMsgID)
	}
	if m.dialog != nil {
		fields = append(fields, message.FieldDialogID)
	}
	if m.text != nil {
		fields = append(fields, message.FieldText)
	}
	if m.text_embedding != nil {
		fields = append(fields, message.FieldTextEmbedding)
	}
	if m.has_media != nil {
		fields = append(fields, message.FieldHasMedia)
	}
	if m.media_info != nil {
		fields = append(fields, message.FieldMediaInfo)
	}
	if m.sent_at != nil {
		fields = append(fields, message.FieldSentAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldMsgID:
		return m.MsgID()
	case message.FieldDialogID:
		return m.DialogID()
	case message.FieldText:
		return m.Text()
	case message.FieldTextEmbedding:
		return m.TextEmbedding()
	case message.FieldHasMedia:
		return m.HasMedia()
	case message.FieldMediaInfo:
		return m.MediaInfo()
	case message.FieldSentAt:
		return m.SentAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldMsgID:
		return m.OldMsgID(ctx)
	case message.FieldDialogID:
		return m.OldDialogID(ctx)
	case message.FieldText:
		return m.OldText(ctx)
	case message.FieldTextEmbedding:
		return m.OldTextEmbedding(ctx)
	case message.FieldHasMedia:
		return m.OldHasMedia(ctx)
	case message.FieldMediaInfo:
		return m.OldMediaInfo(ctx)
	case message.FieldSentAt:
		return m.OldSentAt(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldMsgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgID(v)
		return nil
	case message.FieldDialogID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDialogID(v)
		return nil
	case message.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case message.FieldTextEmbedding:
		v, ok := value.(pgvector.Vector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextEmbedding(v)
		return nil
	case message.FieldHasMedia:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasMedia(v)
		return nil
	case message.FieldMediaInfo:
		v, ok := value.(*types.MediaInfo)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaInfo(v)
		return nil
	case message.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.addmsg_id != nil {
		fields = append(fields, message.FieldMsgID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldMsgID:
		return m.AddedMsgID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldMsgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgID(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldTextEmbedding) {
		fields = append(fields, message.FieldTextEmbedding)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldTextEmbedding:
		m.ClearTextEmbedding()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldMsgID:
		m.ResetMsgID()
		return nil
	case message.FieldDialogID:
		m.ResetDialogID()
		return nil
	case message.FieldText:
		m.ResetText()
		return nil
	case message.FieldTextEmbedding:
		m.ResetTextEmbedding()
		return nil
	case message.FieldHasMedia:
		m.ResetHasMedia()
		return nil
	case message.FieldMediaInfo:
		m.ResetMediaInfo()
		return nil
	case message.FieldSentAt:
		m.ResetSentAt()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dialog != nil {
		edges = append(edges, message.EdgeDialog)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeDialog:
		if id := m.dialog; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddialog {
		edges = append(edges, message.EdgeDialog)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeDialog:
		return m.cleareddialog
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeDialog:
		m.ClearDialog()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeDialog:
		m.ResetDialog()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}
