// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
	"github.com/xyenon/telemikiya/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// MsgID applies equality check predicate on the "msg_id" field. It's identical to MsgIDEQ.
func MsgID(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMsgID, v))
}

// DialogID applies equality check predicate on the "dialog_id" field. It's identical to DialogIDEQ.
func DialogID(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDialogID, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// TextEmbedding applies equality check predicate on the "text_embedding" field. It's identical to TextEmbeddingEQ.
func TextEmbedding(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldTextEmbedding, v))
}

// HasMedia applies equality check predicate on the "has_media" field. It's identical to HasMediaEQ.
func HasMedia(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldHasMedia, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSentAt, v))
}

// MsgIDEQ applies the EQ predicate on the "msg_id" field.
func MsgIDEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMsgID, v))
}

// MsgIDNEQ applies the NEQ predicate on the "msg_id" field.
func MsgIDNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMsgID, v))
}

// MsgIDIn applies the In predicate on the "msg_id" field.
func MsgIDIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMsgID, vs...))
}

// MsgIDNotIn applies the NotIn predicate on the "msg_id" field.
func MsgIDNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMsgID, vs...))
}

// MsgIDGT applies the GT predicate on the "msg_id" field.
func MsgIDGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMsgID, v))
}

// MsgIDGTE applies the GTE predicate on the "msg_id" field.
func MsgIDGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMsgID, v))
}

// MsgIDLT applies the LT predicate on the "msg_id" field.
func MsgIDLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMsgID, v))
}

// MsgIDLTE applies the LTE predicate on the "msg_id" field.
func MsgIDLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMsgID, v))
}

// DialogIDEQ applies the EQ predicate on the "dialog_id" field.
func DialogIDEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDialogID, v))
}

// DialogIDNEQ applies the NEQ predicate on the "dialog_id" field.
func DialogIDNEQ(v int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDialogID, v))
}

// DialogIDIn applies the In predicate on the "dialog_id" field.
func DialogIDIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDialogID, vs...))
}

// DialogIDNotIn applies the NotIn predicate on the "dialog_id" field.
func DialogIDNotIn(vs ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDialogID, vs...))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldText, v))
}

// TextEmbeddingEQ applies the EQ predicate on the "text_embedding" field.
func TextEmbeddingEQ(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldTextEmbedding, v))
}

// TextEmbeddingNEQ applies the NEQ predicate on the "text_embedding" field.
func TextEmbeddingNEQ(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldTextEmbedding, v))
}

// TextEmbeddingIn applies the In predicate on the "text_embedding" field.
func TextEmbeddingIn(vs ...pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldTextEmbedding, vs...))
}

// TextEmbeddingNotIn applies the NotIn predicate on the "text_embedding" field.
func TextEmbeddingNotIn(vs ...pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldTextEmbedding, vs...))
}

// TextEmbeddingGT applies the GT predicate on the "text_embedding" field.
func TextEmbeddingGT(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldTextEmbedding, v))
}

// TextEmbeddingGTE applies the GTE predicate on the "text_embedding" field.
func TextEmbeddingGTE(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldTextEmbedding, v))
}

// TextEmbeddingLT applies the LT predicate on the "text_embedding" field.
func TextEmbeddingLT(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldTextEmbedding, v))
}

// TextEmbeddingLTE applies the LTE predicate on the "text_embedding" field.
func TextEmbeddingLTE(v pgvector.Vector) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldTextEmbedding, v))
}

// TextEmbeddingIsNil applies the IsNil predicate on the "text_embedding" field.
func TextEmbeddingIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldTextEmbedding))
}

// TextEmbeddingNotNil applies the NotNil predicate on the "text_embedding" field.
func TextEmbeddingNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldTextEmbedding))
}

// HasMediaEQ applies the EQ predicate on the "has_media" field.
func HasMediaEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldHasMedia, v))
}

// HasMediaNEQ applies the NEQ predicate on the "has_media" field.
func HasMediaNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldHasMedia, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSentAt, v))
}

// HasDialog applies the HasEdge predicate on the "dialog" edge.
func HasDialog() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DialogTable, DialogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDialogWith applies the HasEdge predicate on the "dialog" edge with a given conditions (other predicates).
func HasDialogWith(preds ...predicate.Dialog) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newDialogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
