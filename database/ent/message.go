// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
	"github.com/xyenon/telemikiya/database/ent/dialog"
	"github.com/xyenon/telemikiya/database/ent/message"
	"github.com/xyenon/telemikiya/types"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MsgID holds the value of the "msg_id" field.
	MsgID int `json:"msg_id,omitempty"`
	// DialogID holds the value of the "dialog_id" field.
	DialogID int64 `json:"dialog_id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// TextEmbedding holds the value of the "text_embedding" field.
	TextEmbedding pgvector.Vector `json:"text_embedding,omitempty"`
	// HasMedia holds the value of the "has_media" field.
	HasMedia bool `json:"has_media,omitempty"`
	// MediaInfo holds the value of the "media_info" field.
	MediaInfo *types.MediaInfo `json:"media_info,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Dialog holds the value of the dialog edge.
	Dialog *Dialog `json:"dialog,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DialogOrErr returns the Dialog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) DialogOrErr() (*Dialog, error) {
	if e.Dialog != nil {
		return e.Dialog, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dialog.Label}
	}
	return nil, &NotLoadedError{edge: "dialog"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldMediaInfo:
			values[i] = new([]byte)
		case message.FieldTextEmbedding:
			values[i] = new(pgvector.Vector)
		case message.FieldHasMedia:
			values[i] = new(sql.NullBool)
		case message.FieldMsgID, message.FieldDialogID:
			values[i] = new(sql.NullInt64)
		case message.FieldText:
			values[i] = new(sql.NullString)
		case message.FieldSentAt:
			values[i] = new(sql.NullTime)
		case message.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_id", values[i])
			} else if value.Valid {
				m.MsgID = int(value.Int64)
			}
		case message.FieldDialogID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dialog_id", values[i])
			} else if value.Valid {
				m.DialogID = value.Int64
			}
		case message.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				m.Text = value.String
			}
		case message.FieldTextEmbedding:
			if value, ok := values[i].(*pgvector.Vector); !ok {
				return fmt.Errorf("unexpected type %T for field text_embedding", values[i])
			} else if value != nil {
				m.TextEmbedding = *value
			}
		case message.FieldHasMedia:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_media", values[i])
			} else if value.Valid {
				m.HasMedia = value.Bool
			}
		case message.FieldMediaInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.MediaInfo); err != nil {
					return fmt.Errorf("unmarshal field media_info: %w", err)
				}
			}
		case message.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				m.SentAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryDialog queries the "dialog" edge of the Message entity.
func (m *Message) QueryDialog() *DialogQuery {
	return NewMessageClient(m.config).QueryDialog(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("msg_id=")
	builder.WriteString(fmt.Sprintf("%v", m.MsgID))
	builder.WriteString(", ")
	builder.WriteString("dialog_id=")
	builder.WriteString(fmt.Sprintf("%v", m.DialogID))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(m.Text)
	builder.WriteString(", ")
	builder.WriteString("text_embedding=")
	builder.WriteString(fmt.Sprintf("%v", m.TextEmbedding))
	builder.WriteString(", ")
	builder.WriteString("has_media=")
	builder.WriteString(fmt.Sprintf("%v", m.HasMedia))
	builder.WriteString(", ")
	builder.WriteString("media_info=")
	builder.WriteString(fmt.Sprintf("%v", m.MediaInfo))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(m.SentAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
